# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pawlinx-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ca-central-1
  environment:
    GRAPHQL_ENDPOINT: /${self:provider.stage}/graphql
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    STAGE: ${self:provider.stage}
    EXECUTION_ROLE: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole
    COGNITO_REGION: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/**"
    - Effect: Allow
      Action: 
        - cognito-identity:Describe*,
        - cognito-identity:Get*,
        - cognito-identity:List*,
        - cognito-idp:Describe*,
        - cognito-idp:AdminGetUser,
        - cognito-idp:List*,
        - cognito-sync:Describe*,
        - cognito-sync:Get*,
        - cognito-sync:List*,
        - iam:ListOpenIdConnectProviders,
        - iam:ListRoles,
        - sns:ListPlatformApplications
      Resource: "arn:aws:cognito-sync:us-east-1:434433799977:identitypool/*:*/identity/*:*/dataset/account"
      

plugins:
  - serverless-offline  
  - serverless-dynamodb-local

custom:
  dynamodb:
    start:
      port: 8000
      sharedDb: true
      inMemory: true
      migrate: true
      seed: true
  serverless-offline:
    port: 4000

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  paws:
    handler: components/paws/paws.api
    events:
      - http:
          path: v1/paws
          method: POST
          authorizer: aws_iam
      - http:
          path: v1/paws/{id}
          method: PUT
          authorizer: aws_iam
      - http:
          path: v1/paws
          method: GET
          authorizer: aws_iam
      - http:
          path: v1/paws/{id}
          method: GET
          authorizer: aws_iam
      - http:
          path: v1/paws/{id}
          method: DELETE
          authorizer: aws_iam
  paws-metadata:
    handler: components/paws/metadata/metadata.api
    events:
      - http:
          path: v1/paws/{id}/metadata
          method: GET
          authorizer: aws_iam
      - http:
          path: v1/paws/metadata
          method: POST
          authorizer: aws_iam
  owners:
    handler: components/owners/owners.api
    events:
      - http:
          path: v1/owners
          method: POST
          authorizer: aws_iam
      - http:
          path: v1/owners
          method: GET
  graphql:
    handler: graphql/api.graphqlHandler
    events:
    - http:
        path: graphql
        method: POST
        cors: true
        authorizer: aws_iam        
          
  graphiql:
    handler: graphql/api.graphiqlHandler
    events:
    - http:
        path: graphiql
        method: GET
        cors: true


    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
